import React, { useState, useEffect, useRef } from 'react';
import { Github, ChevronLeft, ChevronRight, Code2, Terminal, Database, Shield } from 'lucide-react';
import './Team.css';

const Team: React.FC = () => {
  const [currentSlide, setCurrentSlide] = useState(0);
  const timerRef = useRef<number | null>(null);

  const timelineData = [
    {
      period: '–°–µ–Ω—Ç—è–±—Ä—å 2025',
      title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
      description: '–ü—Ä–æ–µ–∫—Ç –Ω–∞—á–∞–ª—Å—è —Å –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ—à–µ–Ω–∏–π. –ò–∑—É—á–∞–ª –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ ‚Äî Signal (–æ—Ç–ª–∏—á–Ω–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è, –Ω–æ –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É), Telegram (–±—ã—Å—Ç—Ä—ã–π, –Ω–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ), WhatsApp (—Å–±–æ—Ä –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö), Matrix (–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–∞—Ü–∏—è, –Ω–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å).',
      details: [
        '–ê–Ω–∞–ª–∏–∑ Signal, Telegram, WhatsApp, Matrix',
        '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º',
        '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è',
        '–í—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞'
      ],
      status: 'completed',
      icon: <Terminal size={32} />
    },
    {
      period: '–°–µ–Ω—Ç—è–±—Ä—å - –û–∫—Ç—è–±—Ä—å 2025',
      title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend –∏ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —è–¥—Ä–∞',
      description: '–û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–µ–ª–∞—Å—å –Ω–∞–¥ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç—å—é –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤.',
      details: [
        'REST API –Ω–∞ Node.js + Express + TypeScript',
        'PostgreSQL + Redis –¥–ª—è –¥–∞–Ω–Ω—ã—Ö',
        'Signal Protocol ‚Äî E2EE —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ',
        'X3DH + Double Ratchet Algorithm',
        'JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è + Bcrypt',
        'Docker + Nginx –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
      ],
      status: 'completed',
      icon: <Database size={32} />
    },
    {
      period: '–ö–æ–Ω–µ—Ü –æ–∫—Ç—è–±—Ä—è 2025',
      title: 'Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
      description: '–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ backend –ø–µ—Ä–µ—à–µ–ª –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏.',
      details: [
        'React 18 + TypeScript + Vite',
        'Socket.io –¥–ª—è WebSocket',
        'WebCrypto API –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
        'Responsive UI/UX –¥–∏–∑–∞–π–Ω',
        'IndexedDB –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è'
      ],
      status: 'completed',
      icon: <Code2 size={32} />
    },
    {
      period: '–ù–æ—è–±—Ä—å 2025 - –ù–∞—Å—Ç–æ—è—â–µ–µ',
      title: '–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ',
      description: '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≥–æ—Ç–æ–≤–∞, –Ω–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â–µ –º–Ω–æ–≥–æ —Ä–∞–±–æ—Ç—ã.',
      details: [
        'üîÑ –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã —Å Sender Keys',
        'üîÑ –û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ —Å E2EE',
        'üîÑ Voice —Å–æ–æ–±—â–µ–Ω–∏—è',
        'üìã Desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (Electron)',
        'üìã Mobile apps (React Native)',
        'üìã Video/Voice –∑–≤–æ–Ω–∫–∏ (WebRTC)',
        'üìã Tor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        'üìã Security audit'
      ],
      status: 'in-progress',
      icon: <Shield size={32} />
    }
  ];

  // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
  const startTimer = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    timerRef.current = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % timelineData.length);
    }, 15000);
  };

  // –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Å–≤–∞–π–ø–µ
  const resetTimer = () => {
    startTimer();
  };

  useEffect(() => {
    startTimer();
    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [timelineData.length]);

  const nextSlide = () => {
    setCurrentSlide((prev) => (prev + 1) % timelineData.length);
    resetTimer();
  };

  const prevSlide = () => {
    setCurrentSlide((prev) => (prev - 1 + timelineData.length) % timelineData.length);
    resetTimer();
  };

  const goToSlide = (index: number) => {
    setCurrentSlide(index);
    resetTimer();
  };

  return (
    <section className="team-section" id="team">
      <div className="team-container">
        <div className="team-header">
          <h2 className="team-title">–û –∫–æ–º–∞–Ω–¥–µ</h2>
          <p className="team-subtitle">
            –û—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏. –û–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫, –æ–¥–Ω–∞ –º–∏—Å—Å–∏—è ‚Äî<br />
            —Å–æ–∑–¥–∞—Ç—å –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å.
          </p>
        </div>

        {/* Timeline Carousel */}
        <div className="timeline-carousel">
          <button className="carousel-button prev" onClick={prevSlide} aria-label="Previous">
            <ChevronLeft size={28} strokeWidth={2.5} />
          </button>

          <div className="timeline-track">
            <div 
              className="timeline-slides"
              style={{ transform: `translateX(-${currentSlide * 100}%)` }}
            >
              {timelineData.map((item, index) => (
                <div 
                  key={index} 
                  className={`timeline-slide ${item.status} ${index === currentSlide ? 'active' : ''}`}
                >
                  <div className="timeline-slide-content">
                    <div className="timeline-icon">
                      {item.icon}
                    </div>

                    <div className="timeline-period">{item.period}</div>
                    <h3 className="timeline-title">{item.title}</h3>
                    <p className="timeline-description">{item.description}</p>
                    
                    <ul className="timeline-details">
                      {item.details.map((detail, idx) => (
                        <li key={idx}>{detail}</li>
                      ))}
                    </ul>

                    <div className="timeline-status">
                      {item.status === 'completed' && (
                        <span className="status-badge completed">‚úì –ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                      )}
                      {item.status === 'in-progress' && (
                        <span className="status-badge in-progress">‚ü≥ –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</span>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <button className="carousel-button next" onClick={nextSlide} aria-label="Next">
            <ChevronRight size={28} strokeWidth={2.5} />
          </button>

          {/* Progress Dots */}
          <div className="carousel-dots">
            {timelineData.map((_, index) => (
              <button
                key={index}
                className={`dot ${index === currentSlide ? 'active' : ''}`}
                onClick={() => goToSlide(index)}
                aria-label={`Go to slide ${index + 1}`}
              />
            ))}
          </div>
        </div>

        {/* Developer Card */}
        <div className="developer-card">
          <div className="developer-card-glow"></div>
          <div className="developer-card-inner">
            <div className="developer-header">
              <div className="developer-avatar">
                <div className="avatar-glow"></div>
                <div className="avatar-inner">
                  <Code2 size={36} strokeWidth={2} />
                </div>
              </div>
              <div className="developer-info">
                <div className="developer-badge">
                  <Terminal size={16} />
                  <span>Developer</span>
                </div>
                <h3 className="developer-name">–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞</h3>
                <p className="developer-role">–°—Ç—É–¥–µ–Ω—Ç 4 –∫—É—Ä—Å–∞ ‚Ä¢ Fullstack Developer</p>
              </div>
            </div>

            <div className="developer-quote">
              <div className="quote-icon">"</div>
              <p>–ù–∞—á–∞–ª –∫–∞–∫ –¥–∏–ø–ª–æ–º–Ω—É—é —Ä–∞–±–æ—Ç—É. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–Ω—è–ª –º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ 
              –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö. –†–µ—à–∏–ª –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è '–≥–∞–ª–æ—á–∫–æ–π' –¥–ª—è –¥–∏–ø–ª–æ–º–∞.</p>
            </div>

            <div className="developer-journey">
              <h4 className="journey-title">
                <Shield size={20} />
                –ü—É—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
              </h4>
              <ul>
                <li>
                  <span className="journey-icon">üìö</span>
                  –ò–∑—É—á–∞—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –∏ research papers
                </li>
                <li>
                  <span className="journey-icon">üë•</span>
                  –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é—Å—å —Å –æ–ø—ã—Ç–Ω—ã–º–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏
                </li>
                <li>
                  <span className="journey-icon">üîç</span>
                  –ü–æ–ª—É—á–∞—é –∫–æ–¥-—Ä–µ–≤—å—é –æ—Ç senior –¥–µ–≤–µ–ª–æ–ø–µ—Ä–æ–≤
                </li>
                <li>
                  <span className="journey-icon">üåê</span>
                  –£—á–∞—Å—Ç–≤—É—é –≤ open source —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö
                </li>
              </ul>
            </div>

            <div className="developer-reality">
              <div className="reality-block honesty">
                <strong>–ß–µ—Å—Ç–Ω–æ:</strong> –î–∞, —ç—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Ç–∞–∫–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞. –î–∞, –¥–µ–ª–∞—é –æ—à–∏–±–∫–∏ –∏ —É—á—É—Å—å –Ω–∞ –Ω–∏—Ö. 
                –ù–æ –ø–æ–¥—Ö–æ–∂—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–µ—á—å –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π.
              </div>
              
              <div className="reality-block openness">
                <strong>–û—Ç–∫—Ä—ã—Ç–æ:</strong> –ö–æ–¥ –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã. 
                –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è —Ñ–∏–¥–±—ç–∫ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.
              </div>
            </div>

            <div className="developer-tech-stack">
              <h4 className="stack-title">
                <Database size={20} />
                Tech Stack
              </h4>
              <div className="tech-grid">
                <div className="tech-category">
                  <div className="category-header">
                    <Terminal size={16} />
                    <strong>Backend</strong>
                  </div>
                  <span>Node.js, Express, TypeScript, PostgreSQL, Redis, Socket.io, Docker, Nginx</span>
                </div>
                <div className="tech-category">
                  <div className="category-header">
                    <Code2 size={16} />
                    <strong>Frontend</strong>
                  </div>
                  <span>React 18, TypeScript, Vite, Socket.io Client, WebCrypto API</span>
                </div>
                <div className="tech-category">
                  <div className="category-header">
                    <Shield size={16} />
                    <strong>Security</strong>
                  </div>
                  <span>Signal Protocol, X3DH, Double Ratchet, XChaCha20-Poly1305, Ed25519, JWT, Bcrypt</span>
                </div>
              </div>
            </div>

            <div className="developer-footer">
              <a 
                href="https://github.com/GANSGX" 
                target="_blank" 
                rel="noopener noreferrer"
                className="github-link"
              >
                <Github size={20} />
                <span>View on GitHub</span>
                <ChevronRight size={16} />
              </a>
              <div className="footer-badges">
                <span className="badge">Open Source</span>
                <span className="badge">Audit Welcome</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Team;